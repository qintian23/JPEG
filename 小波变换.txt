#include "stdafx.h"
#include "WaveTransform.h"
#include <math.h>
#include <imgproc/imgproc.hpp>
Mat WaveTransform::WDT(const Mat &_src,const string _wname,const int _level)
{
    Mat src=Mat_<float>(_src);
    Mat dst=Mat::zeros(src.rows,src.cols,src.type());
    int N=src.rows;
    int D=src.cols;
    //高通低通滤波器
    Mat lowFilter;
    Mat highFilter;
    wavelet(_wname,lowFilter,highFilter);
    //小波变换
    int t=1;
    int row=N;
    int col=D;
    while (t<=_level)
    {
        //先进行 行小波变换
        for (int i=0;i<row;i++)
        {
            //取出src中要处理的数据的一行
            Mat oneRow=Mat::zeros(1,col,src.type());
            for (int j=0;j<col;j++)
            {
                oneRow.at<float>(0,j)=src.at<float>(i,j);
            }
            oneRow=waveletDecompose(oneRow,lowFilter,highFilter);
            for (int j=0;j<col;j++)
            {
                dst.at<float>(i,j)=oneRow.at<float>(0,j);
            }
        }
        char s[10];
        itoa(t,s,10);
        imshow(s,dst);
        waitKey();
#if 0
    //    normalize(dst,dst,0,255,NORM_MINMAX);
        IplImage dstImg1=IplImage(dst);
        cvSaveImage("dst1.jpg",&dstImg1);
#endif

        //小波列变换
        for (int j=0;j<col;j++)
        {
            Mat oneCol=Mat::zeros(row,1,src.type());
            for (int i=0;i<row;i++)
            {
                oneCol.at<float>(i,0)=dst.at<float>(i,j);//dst,not src
            }
            oneCol=(waveletDecompose(oneCol.t(),lowFilter,highFilter)).t();
            for (int i=0;i<row;i++)
            {
                dst.at<float>(i,j)=oneCol.at<float>(i,0);
            }
        }
#if 0
        //    normalize(dst,dst,0,255,NORM_MINMAX);
        IplImage dstImg2=IplImage(dst);
        cvSaveImage("dst2.jpg",&dstImg2);
#endif
        //更新
        row/=2;
        col/=2;
        t++;
        src=dst;

    }
    return dst;
}

//生成不同类型的小波
void WaveTransform::wavelet( const string _wname, Mat &_lowFilter, Mat &_highFilter )
{

    if (_wname=="haar" || _wname=="db1")
    {
        int N=2;
        _lowFilter=Mat::zeros(1,N,CV_32F);
        _highFilter=Mat::zeros(1,N,CV_32F);

        _lowFilter.at<float>(0,0)=1/sqrtf(N);
        _lowFilter.at<float>(0,1)=1/sqrtf(N);

        _highFilter.at<float>(0,0)=-1/sqrtf(N);
        _highFilter.at<float>(0,1)=1/sqrtf(N);
    }
    if (_wname=="sym2")
    {
        int N=4;
        float h[]={-0.483, 0.836, -0.224, -0.129};
        float l[]={-0.129, 0.224,    0.837, 0.483};

        _lowFilter=Mat::zeros(1,N,CV_32F);
        _highFilter=Mat::zeros(1,N,CV_32F);

        for (int i=0;i<N;i++)
        {
            _lowFilter.at<float>(0,i)=l[i];
            _highFilter.at<float>(0,i)=h[i];
        }
    }

}

//小波分解
Mat WaveTransform::waveletDecompose( const Mat &_src, const Mat &_lowFilter, const Mat &_highFilter )
{
    assert(_src.rows==1 && _lowFilter.rows==1 && _highFilter.rows ==1);
    assert(_src.cols>=_lowFilter.cols && _src.cols>=_highFilter.cols );
    Mat &src=Mat_<float>(_src);

    int D=src.cols;

    Mat &lowFilter=Mat_<float>(_lowFilter);
    Mat &highFilter=Mat_<float>(_highFilter);

    //频域滤波或时域卷积；ifft( fft(x) * fft(filter)) = cov(x,filter)
    Mat dst1=Mat::zeros(1,D,src.type());
    Mat dst2=Mat::zeros(1,D,src.type());

    filter2D(src,dst1,-1,lowFilter);
    filter2D(src,dst2,-1,highFilter);

    //下采样
    Mat downDst1=Mat::zeros(1,D/2,src.type());
    Mat downDst2=Mat::zeros(1,D/2,src.type());

    resize(dst1,downDst1,downDst1.size());
    resize(dst2,downDst2,downDst2.size());

    //数据拼接
    for (int i=0;i<D/2;i++)
    {
        src.at<float>(0,i)=downDst1.at<float>(0,i);
        src.at<float>(0,i+D/2)=downDst2.at<float>(0,i);

    }
    return src;
}